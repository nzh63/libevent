---
name: build

on:
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      - master
    push:
      paths-ignore:
        - "**.md"
        - ".mailmap"
        - "ChangeLog*"
        - "whatsnew*"
        - "LICENSE"
  push:
    branches:
      - master
    push:
      paths-ignore:
        - "**.md"
        - ".mailmap"
        - "ChangeLog*"
        - "whatsnew*"
        - "LICENSE"

jobs:
  windows-vs2019-job:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci/windows skip')"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        EVENT_MATRIX:
          - NONE
          - NO_SSL
          - LIBRARY_TYPE_STATIC
          - DISABLE_OPENSSL
          - DISABLE_THREAD_SUPPORT
          - DISABLE_DEBUG_MODE
          - DISABLE_MM_REPLACEMENT
          - DUNICODE
          - UNOCODE_TEMPORARY_DIRECTORY
          - TEST_EXPORT_SHARED
          - TEST_EXPORT_STATIC

    steps:
      - uses: actions/checkout@v2.0.0

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ matrix.os }}-${{ matrix.EVENT_MATRIX }}-v4

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v7
        id: runvcpkg
        with:
          vcpkgArguments: zlib:x64-windows openssl:x64-windows mbedtls:x64-windows
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgTriplet: x64-windows
          vcpkgGitCommitId: af2287382b1991dbdcb7e5112d236f3323b9dd7a

      - name: Build
        shell: powershell
        run: |
          $EVENT_BUILD_PARALLEL=10

          if ( "${{ matrix.EVENT_MATRIX }}" -eq "LIBRARY_TYPE_STATIC" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=STATIC -DEVENT__MSVC_STATIC_RUNTIME=OFF"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "DISABLE_OPENSSL" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_OPENSSL=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "DISABLE_THREAD_SUPPORT" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_THREAD_SUPPORT=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "DISABLE_DEBUG_MODE" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_DEBUG_MODE=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "DISABLE_MM_REPLACEMENT" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_MM_REPLACEMENT=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "UNICODE" ) {
            $EVENT_CMAKE_OPTIONS="-DCMAKE_C_FLAGS='-DUNICODE -D_UNICODE'"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "UNOCODE_TEMPORARY_DIRECTORY" ) {
            $EVENT_CMAKE_OPTIONS=""
            mkdir "${{ runner.workspace }}\𝑼𝑵𝑰𝑪𝑶𝑫𝑬"
            echo "TMP=${{ runner.workspace }}\𝑼𝑵𝑰𝑪𝑶𝑫𝑬" >> $env:GITHUB_ENV
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_SHARED" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_STATIC" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__LIBRARY_TYPE=STATIC -DEVENT__MSVC_STATIC_RUNTIME=OFF -DEVENT__DISABLE_TESTS=ON -DEVENT__DISABLE_SAMPLES=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -eq "NO_SSL" ) {
            $EVENT_CMAKE_OPTIONS="-DEVENT__DISABLE_OPENSSL=ON -DEVENT__DISABLE_MBEDTLS=ON"
          }
          else {
            $EVENT_CMAKE_OPTIONS=""
          }

          mkdir build -ea 0
          cd build

          $CMAKE_CMD="cmake -G 'Visual Studio 16 2019' -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake .. $EVENT_CMAKE_OPTIONS"
          function cmake_configure($retry)
          {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            }
            catch {
              $errcode=1
            }
            finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1
          cmake --build . -j $EVENT_BUILD_PARALLEL -- /nologo /verbosity:minimal

      - name: Test
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 20
          shell: powershell
          command: |
            echo $env:TMP

            $EVENT_TESTS_PARALLEL=1

            cd build

            try {
              if ("${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_STATIC") {
                python ../test-export/test-export.py static
              } elseif ("${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_SHARED") {
                python ../test-export/test-export.py shared
              } else {
                ctest --output-on-failure -j $EVENT_TESTS_PARALLEL
                if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
              }
            } catch {
              $host.SetShouldExit($LastExitCode)
            }

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.EVENT_MATRIX }}-build
          path: build

  mingw-autotools-job:
    runs-on: windows-2019
    if: "!contains(github.event.head_commit.message, 'ci/mingw skip') && !contains(github.event.head_commit.message, 'ci/mingw/autotools skip')"
    strategy:
      fail-fast: false
      matrix:
        EVENT_MATRIX:
          - none
          - no-ssl
          - disable-openssl
          - disable-thread-support
          - disable-debug-mode
          - disable-malloc-replacement

    steps:
      - uses: actions/checkout@v2.0.0
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: mingw-autotools-${{ matrix.EVENT_MATRIX }}-v5
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc autoconf automake libtool mingw-w64-x86_64-openssl mingw-w64-x86_64-mbedtls pkg-config

      - name: Build
        shell: powershell
        run: |
          $env:EVENT_CONFIGURE_OPTIONS=""
          if ( "${{ matrix.EVENT_MATRIX }}" -eq "no-ssl" ) {
            $env:EVENT_CONFIGURE_OPTIONS="--disable-openssl --disable-mbedtls"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -ne "none" ) {
            $env:EVENT_CONFIGURE_OPTIONS="--${{ matrix.EVENT_MATRIX }}"
          }
          $env:EVENT_BUILD_PARALLEL=10

          $script='
          export PATH="/mingw64/bin:/usr/bin:/bin:/usr/local/bin:/opt/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:$PATH"
          ./autogen.sh 2>&1 3>&1
          [[ $? -ne 0 ]] && exit 1
          mkdir -p build
          cd build
          [[ $? -ne 0 ]] && exit 1
          LDFLAGS="-L/mingw64/lib" CFLAGS="-I/mingw64/include" ../configure $EVENT_CONFIGURE_OPTIONS 2>&1
          [[ $? -ne 0 ]] && exit 1
          make -j $EVENT_BUILD_PARALLEL 2>&1
          [[ $? -ne 0 ]] && exit 1
          exit 0
          '
          D:\a\_temp\msys64\usr\bin\bash.exe -c $script

      - name: Test
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 20
          shell: powershell
          command: |
            $env:EVENT_TESTS_PARALLEL=1

            $script='
            export PATH="/mingw64/bin:/usr/bin:/bin:/usr/local/bin:/opt/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:$PATH"
            cd build
            make verify -j $EVENT_TESTS_PARALLEL 2>&1 '
            D:\a\_temp\msys64\usr\bin\bash.exe -c $script

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: mingw-${{ matrix.EVENT_MATRIX }}-build
          path: build

  mingw-cmake-job:
    runs-on: windows-2019
    # FIXME: disabled for now, see [1].
    #   [1]: https://github.com/libevent/libevent/issues/1207
    if: "false && !contains(github.event.head_commit.message, 'ci/mingw skip') && !contains(github.event.head_commit.message, 'ci/mingw/cmake skip')"
    strategy:
      fail-fast: false
      matrix:
        EVENT_MATRIX:
          - NONE
          - NO_SSL
          - DISABLE_OPENSSL
          - DISABLE_THREAD_SUPPORT
          - DISABLE_DEBUG_MODE
          - DISABLE_MM_REPLACEMENT

    steps:
      - uses: actions/checkout@v2.0.0
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: mingw-cmake-${{ matrix.EVENT_MATRIX }}-v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-openssl mingw-w64-x86_64-mbedtls

      - name: Build
        shell: powershell
        run: |
          $EVENT_CONFIGURE_OPTIONS=""
          if ( "${{ matrix.EVENT_MATRIX }}" -ne "NO_SSL" ) {
            $EVENT_CONFIGURE_OPTIONS="-DEVENT__DISABLE_OPENSSL=ON -DEVENT__DISABLE_MBEDTLS=ON"
          }
          elseif ( "${{ matrix.EVENT_MATRIX }}" -ne "NONE" ) {
            $EVENT_CONFIGURE_OPTIONS="-DEVENT__${{ matrix.EVENT_MATRIX }}=ON"
          }
          $env:PATH="D:\a\_temp\msys64\mingw64\bin;D:\a\_temp\msys64\usr\bin;$env:PATH"
          mkdir build -ea 0
          cd build
          function cmake_configure($retry)
          {
            $errcode=0
            try {
              cmake .. -G "MSYS Makefiles" $EVENT_CONFIGURE_OPTIONS -DCMAKE_C_FLAGS=-w
              $errcode=$LastExitCode
            }
            catch {
              $errcode=1
            }
            finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1
          cmake --build .

      - name: Test
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 20
          shell: powershell
          command: |
            cd build
            ctest --output-on-failure

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: mingw-${{ matrix.EVENT_MATRIX }}-build
          path: build
